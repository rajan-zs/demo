name: Workflow-Pipeline
on:
  pull_request:
    branches:
      - "*"
jobs:
  setup:
    name: Test and Code Quality
    runs-on: [ self-hosted, linux ]
    env:
      GOPRIVATE: "github-lvs.corpzone.internalzone.com/mcafee,developer.zopsmart.com/go/gofr"

    services:
      mysql:
        image: mysql:latest
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: "password"

      redis:
        image: "redis:latest"
        ports:
          - "6379:6379"
        options: "--entrypoint redis-server"

      zipkin:
        image: openzipkin/zipkin:2
        ports:
          - "9411:9411"

      elasticsearch:
        image: elasticsearch:6.8.6
        ports:
          - 2012:9200
          - 2013:9300
          - 9200:9200
        env:
          discovery type: "single-node"

      kafka:
        image: krisgeus/docker-kafka
        ports:
          - 2008:2008
          - 2009:2009
        env:
          ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:2008,INTERNAL://localhost:2009'
          LISTENERS: 'PLAINTEXT://0.0.0.0:2008,INTERNAL://0.0.0.0:2009'
          SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT'
          INTER_BROKER: 'INTERNAL'
          KAFKA_CREATE_TOPICS: 'test-topic'
          KAFKA_HOSTS: 'localhost:2008,localhost:2009'
          KAFKA_TOPIC: 'test-topic'

      mongo:
        image: "mongo:latest"
        ports:
          - "27017:27017"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123

      mssql:
        image: mcr.microsoft.com/mssql/server:2017-latest
        ports:
          - "1433:1433"
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: reallyStrongPwd123

      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - "2021:8000"

      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: test

      cassandra:
        image: cassandra:latest
        ports:
          - 9041:9042
        options: --health-cmd "cqlsh --debug"

    steps:
      - name: Set up  Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
          id: Go

      - name: Checkout code into go module directory
        uses: actions/checkout@v2

      - name: Load Schema of Postgres
        run: |
          docker run -d postgres:latest -i ${{ job.services.postgres.id }} -U postgres --dbname=test < .github/setups/setup.sql
      - name: Load Schema of Cassandra
        run: |
          docker exec -i ${{ job.services.cassandra.id }} cqlsh --debug  < .github/setups/keyspace.cql
      - name: Set up MySQL
        run: |
          docker exec -i ${{ job.services.mysql.id }} mysql -uroot -ppassword -e 'CREATE DATABASE test;'
      - name: Load Schema of Solr
        run: |
          docker rm -f /solr
          sleep 10s;
          docker run -d --name solr -p 8983:8983 solr:8 -DzkRun;
          sleep 10s;
          docker exec -i solr sh < .github/setups/solrSchema.sh;
      - name: Set up YugabyteDB
        run: |
          docker rm -f /gofr-yugabyte
          sleep 10s;
          docker run --network="host" --name gofr-yugabyte -p7000:7000 -p6000:6000 -p5433:5433 -p9042:9042 -d yugabytedb/yugabyte:latest bin/yugabyted start --daemon=false
      - name: Load Schema of YCQL
        run: |
          temp=$(sudo docker ps | grep yugabyte | awk '{print $1}');
          sleep 10s;
          docker exec -i $temp /home/yugabyte/bin/ycqlsh < .github/setups/keyspace.ycql;
      - name: Get dependencies
        run: |
          git config --global url."https://${{ secrets.PAT}}@github-lvs.corpzone.internalzone.com/".insteadOf "https://github-lvs.corpzone.internalzone.com/"
          go get -v -t -d ./...
      - name: Test
        run: |
          export GOFR_ENV=test
          mkdir build
          go test ./... -short --tags=integration -v -coverprofile build/coverage.txt -coverpkg=./...
          cat build/coverage.txt | grep -v '.pb.go' > build/coverage.out
          go tool cover -func build/coverage.out
      - name: Set Configs
        run: |
          cd examples/sample-api/configs
          echo "APP_VERSION=${GITHUB_SHA::7}" >> .env
      - name: Build
        run: |
          cd examples/sample-api
          go build -o main
      - name: Setup linter
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.44.0
          golangci-lint --version
      - name: Linter Check
        run: |
          golangci-lint run --timeout 9m0s