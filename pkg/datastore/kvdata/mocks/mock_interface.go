// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package kvdata is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "developer.zopsmart.com/go/gofr/pkg/service"
	gomock "github.com/golang/mock/gomock"
)

// MockHTTPService is a mock of HTTPService interface.
type MockHTTPService struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServiceMockRecorder
}

// MockHTTPServiceMockRecorder is the mock recorder for MockHTTPService.
type MockHTTPServiceMockRecorder struct {
	mock *MockHTTPService
}

// NewMockHTTPService creates a new mock instance.
func NewMockHTTPService(ctrl *gomock.Controller) *MockHTTPService {
	mock := &MockHTTPService{ctrl: ctrl}
	mock.recorder = &MockHTTPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPService) EXPECT() *MockHTTPServiceMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockHTTPService) Bind(resp []byte, i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", resp, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockHTTPServiceMockRecorder) Bind(resp, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockHTTPService)(nil).Bind), resp, i)
}

// Delete mocks base method.
func (m *MockHTTPService) Delete(ctx context.Context, api string, body []byte) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, api, body)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHTTPServiceMockRecorder) Delete(ctx, api, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHTTPService)(nil).Delete), ctx, api, body)
}

// Get mocks base method.
func (m *MockHTTPService) Get(ctx context.Context, api string, params map[string]interface{}) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, api, params)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPServiceMockRecorder) Get(ctx, api, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPService)(nil).Get), ctx, api, params)
}

// Post mocks base method.
func (m *MockHTTPService) Post(ctx context.Context, api string, params map[string]interface{}, body []byte) (*service.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, api, params, body)
	ret0, _ := ret[0].(*service.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHTTPServiceMockRecorder) Post(ctx, api, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHTTPService)(nil).Post), ctx, api, params, body)
}

// MockKVStorer is a mock of KVStorer interface.
type MockKVStorer struct {
	ctrl     *gomock.Controller
	recorder *MockKVStorerMockRecorder
}

// MockKVStorerMockRecorder is the mock recorder for MockKVStorer.
type MockKVStorerMockRecorder struct {
	mock *MockKVStorer
}

// NewMockKVStorer creates a new mock instance.
func NewMockKVStorer(ctrl *gomock.Controller) *MockKVStorer {
	mock := &MockKVStorer{ctrl: ctrl}
	mock.recorder = &MockKVStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStorer) EXPECT() *MockKVStorerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKVStorer) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKVStorerMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVStorer)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockKVStorer) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVStorerMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKVStorer)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockKVStorer) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKVStorerMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKVStorer)(nil).Set), ctx, key, value)
}
