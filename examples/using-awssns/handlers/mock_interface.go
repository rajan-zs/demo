// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/notifier/interface.go

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	types "developer.zopsmart.com/go/gofr/pkg/gofr/types"
	notifier "developer.zopsmart.com/go/gofr/pkg/notifier"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockNotifier) Bind(message []byte, target interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", message, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockNotifierMockRecorder) Bind(message, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockNotifier)(nil).Bind), message, target)
}

// HealthCheck mocks base method.
func (m *MockNotifier) HealthCheck() types.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(types.Health)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockNotifierMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockNotifier)(nil).HealthCheck))
}

// IsSet mocks base method.
func (m *MockNotifier) IsSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSet indicates an expected call of IsSet.
func (mr *MockNotifierMockRecorder) IsSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSet", reflect.TypeOf((*MockNotifier)(nil).IsSet))
}

// Publish mocks base method.
func (m *MockNotifier) Publish(value interface{}, attributes map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", value, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNotifierMockRecorder) Publish(value, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNotifier)(nil).Publish), value, attributes)
}

// Subscribe mocks base method.
func (m *MockNotifier) Subscribe() (*notifier.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(*notifier.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNotifierMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNotifier)(nil).Subscribe))
}

// SubscribeWithResponse mocks base method.
func (m *MockNotifier) SubscribeWithResponse(target interface{}) (*notifier.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeWithResponse", target)
	ret0, _ := ret[0].(*notifier.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeWithResponse indicates an expected call of SubscribeWithResponse.
func (mr *MockNotifierMockRecorder) SubscribeWithResponse(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeWithResponse", reflect.TypeOf((*MockNotifier)(nil).SubscribeWithResponse), target)
}
